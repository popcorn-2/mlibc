name: Rebase & Build Popcorn mlibc

on:
  schedule:
    - cron: '0 3 1,15 * *' # 1st and 15th of each month
  workflow_dispatch:     # manual trigger

jobs:
  build-llvm:
    runs-on: ["X64", "macOS", "self-hosted"]
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
    - name: Checkout fork repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 15 # only pull enough to cover our extra commits

    - name: Rebase onto upstream
      run: |
        git remote add upstream https://github.com/managarm/mlibc.git
        git fetch upstream master
        git rebase upstream/master
        git push --force-with-lease

    - name: Unpack toolchain
      run: |
        curl -L -O https://github.com/popcorn-2/llvm-project/releases/latest/download/toolchain-$(uname -s).tar.gz > toolchain-$(uname -s).tar.gz
        mkdir toolchain
        tar -C toolchain/ -xzf $(pwd)/toolchain-$(uname -s).tar.gz
    
    - name: Build mlibc
      run: |
        mkdir -p build
        echo "[binaries]" > build/toolchain.cross
        echo "c = ['$(pwd)/toolchain/bin/clang', '--target=x86_64-unknown-popcorn']" >> build/toolchain.cross
        echo "cpp = ['$(pwd)/toolchain/bin/clang++', '--target=x86_64-unknown-popcorn']" >> build/toolchain.cross
        cd build
        meson setup \
          ${{ github.workspace }} \
          --cross-file=${{ github.workspace }}/ci/popcorn.cross-file \
          --cross-file=toolchain.cross \
          -Ddefault_library=static -Dlibgcc_dependency=false \
          --prefix /system
        ninja
    
    - name: Package
      run: |
        mkdir ${{github.workspace}}/pkg
        cd build
        DESTDIR="${{github.workspace}}/pkg" ninja install
        cd ..
        tar -C ${{github.workspace}}/pkg -czf mlibc.tar.gz .
    
    - name: Define version tag
      id: version
      run: |
        UPSTREAM_SHA=$(git rev-parse --short upstream/master)
        PATCH_SHA=$(git rev-parse --short HEAD)
        TAG="popcorn-clang-${UPSTREAM_SHA}-${PATCH_SHA}"
        echo "TAG=$TAG" >> $GITHUB_OUTPUT
        echo "Generated release tag: $TAG"

    - name: Create or update GitHub Release
      run: |
        TAG=${{ steps.version.outputs.TAG }}
        RELEASE_NAME="Popcorn mlibc Build - $TAG"

        gh repo set-default popcorn-2/mlibc

        # Check if release exists
        if gh release view "$TAG" > /dev/null 2>&1; then
          echo "Release $TAG exists. Updating..."
        else
          echo "Creating release $TAG..."
          gh release create "$TAG" \
            --title "$RELEASE_NAME" \
            --notes "Automated build of Popcorn mlibc based on upstream HEAD + patches."
        fi

        # Upload artifact
        gh release upload "$TAG" mlibc.tar.gz --clobber

    - name: Remove upstream
      if: always()
      run: |
        git remote rm upstream
